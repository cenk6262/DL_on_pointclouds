[01/08 02:54:34] S3DIS INFO: dist_url: tcp://localhost:8888
dist_backend: nccl
multiprocessing_distributed: False
ngpus_per_node: 1
world_size: 1
launcher: mp
local_rank: 0
use_gpu: True
seed: 53
epoch: 0
epochs: 100
ignore_index: None
val_fn: validate
deterministic: False
sync_bn: False
criterion_args:
  NAME: CrossEntropy
  label_smoothing: 0.2
use_mask: False
grad_norm_clip: 10
layer_decay: 0
step_per_update: 1
start_epoch: 1
sched_on_epoch: True
wandb:
  use_wandb: False
  project: PointNeXt-S3DIS
  tags: ['s3dis', 'train', 'pointnext-s', 'ngpus1']
  name: s3dis-train-pointnext-s-ngpus1-20250108-025434-MRkUhM5wb82fGtwBe3cKZd
use_amp: False
use_voting: False
val_freq: 1
resume: False
test: False
finetune: False
mode: train
logname: None
load_path: None
print_freq: 50
save_freq: -1
root_dir: log/s3dis
pretrained_path: None
datatransforms:
  train: ['ChromaticAutoContrast', 'PointsToTensor', 'PointCloudScaling', 'PointCloudXYZAlign', 'PointCloudJitter', 'ChromaticDropGPU', 'ChromaticNormalize']
  val: ['PointsToTensor', 'PointCloudXYZAlign', 'ChromaticNormalize']
  vote: ['ChromaticDropGPU']
  kwargs:
    color_drop: 0.2
    gravity_dim: 2
    scale: [0.9, 1.1]
    angle: [0, 0, 1]
    jitter_sigma: 0.005
    jitter_clip: 0.02
feature_keys: x,heights
dataset:
  common:
    NAME: S3DIS
    data_root: data/S3DIS/s3disfull
    test_area: 5
    voxel_size: 0.04
  train:
    split: train
    voxel_max: 24000
    loop: 30
    presample: False
  val:
    split: val
    voxel_max: None
    presample: True
  test:
    split: test
    voxel_max: None
    presample: False
num_classes: 13
batch_size: 32
val_batch_size: 1
dataloader:
  num_workers: 6
cls_weighed_loss: False
optimizer:
  NAME: adamw
  weight_decay: 0.0001
sched: cosine
warmup_epochs: 0
min_lr: 1e-05
lr: 0.01
log_dir: log/s3dis/s3dis-train-pointnext-s-ngpus1-20250108-025434-MRkUhM5wb82fGtwBe3cKZd
model:
  NAME: BaseSeg
  encoder_args:
    NAME: PointNextEncoder
    blocks: [1, 1, 1, 1, 1]
    strides: [1, 4, 4, 4, 4]
    sa_layers: 2
    sa_use_res: True
    width: 32
    in_channels: 4
    expansion: 4
    radius: 0.1
    nsample: 32
    aggr_args:
      feature_type: dp_fj
      reduction: max
    group_args:
      NAME: ballquery
      normalize_dp: True
    conv_args:
      order: conv-norm-act
    act_args:
      act: relu
    norm_args:
      norm: bn
  decoder_args:
    NAME: PointNextDecoder
  cls_args:
    NAME: SegHead
    num_classes: 13
    in_channels: None
    norm_args:
      norm: bn
CUDA_VISIBLE_DEVICES: 0
python: examples/segmentation/main.py
rank: 0
distributed: False
mp: False
task_name: s3dis
cfg_basename: pointnext-s
opts: CUDA_VISIBLE_DEVICES=0-python
is_training: True
run_name: s3dis-train-pointnext-s-ngpus1-20250108-025434-MRkUhM5wb82fGtwBe3cKZd
run_dir: log/s3dis/s3dis-train-pointnext-s-ngpus1-20250108-025434-MRkUhM5wb82fGtwBe3cKZd
exp_dir: log/s3dis/s3dis-train-pointnext-s-ngpus1-20250108-025434-MRkUhM5wb82fGtwBe3cKZd
ckpt_dir: log/s3dis/s3dis-train-pointnext-s-ngpus1-20250108-025434-MRkUhM5wb82fGtwBe3cKZd/checkpoint
log_path: log/s3dis/s3dis-train-pointnext-s-ngpus1-20250108-025434-MRkUhM5wb82fGtwBe3cKZd/s3dis-train-pointnext-s-ngpus1-20250108-025434-MRkUhM5wb82fGtwBe3cKZd.log
cfg_path: log/s3dis/s3dis-train-pointnext-s-ngpus1-20250108-025434-MRkUhM5wb82fGtwBe3cKZd/cfg.yaml
[01/08 02:54:34] S3DIS INFO: radius: [[0.1], [0.1], [0.2], [0.4], [0.8]],
 nsample: [[32], [32], [32], [32], [32]]
[01/08 02:54:34] S3DIS INFO: NAME: ballquery
normalize_dp: True
radius: 0.1
nsample: 32
[01/08 02:54:34] S3DIS INFO: NAME: ballquery
normalize_dp: True
radius: 0.2
nsample: 32
[01/08 02:54:34] S3DIS INFO: NAME: ballquery
normalize_dp: True
radius: 0.4
nsample: 32
[01/08 02:54:34] S3DIS INFO: NAME: ballquery
normalize_dp: True
radius: 0.8
nsample: 32
[01/08 02:54:36] S3DIS INFO: BaseSeg(
  (encoder): PointNextEncoder(
    (encoder): Sequential(
      (0): Sequential(
        (0): SetAbstraction(
          (convs): Sequential(
            (0): Sequential(
              (0): Conv1d(4, 32, kernel_size=(1,), stride=(1,))
            )
          )
        )
      )
      (1): Sequential(
        (0): SetAbstraction(
          (skipconv): Sequential(
            (0): Conv1d(32, 64, kernel_size=(1,), stride=(1,))
          )
          (act): ReLU(inplace=True)
          (convs): Sequential(
            (0): Sequential(
              (0): Conv2d(35, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (grouper): QueryAndGroup()
        )
      )
      (2): Sequential(
        (0): SetAbstraction(
          (skipconv): Sequential(
            (0): Conv1d(64, 128, kernel_size=(1,), stride=(1,))
          )
          (act): ReLU(inplace=True)
          (convs): Sequential(
            (0): Sequential(
              (0): Conv2d(67, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (grouper): QueryAndGroup()
        )
      )
      (3): Sequential(
        (0): SetAbstraction(
          (skipconv): Sequential(
            (0): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          )
          (act): ReLU(inplace=True)
          (convs): Sequential(
            (0): Sequential(
              (0): Conv2d(131, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (grouper): QueryAndGroup()
        )
      )
      (4): Sequential(
        (0): SetAbstraction(
          (skipconv): Sequential(
            (0): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
          )
          (act): ReLU(inplace=True)
          (convs): Sequential(
            (0): Sequential(
              (0): Conv2d(259, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (grouper): QueryAndGroup()
        )
      )
    )
  )
  (decoder): PointNextDecoder(
    (decoder): Sequential(
      (0): Sequential(
        (0): FeaturePropogation(
          (convs): Sequential(
            (0): Sequential(
              (0): Conv1d(96, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
      )
      (1): Sequential(
        (0): FeaturePropogation(
          (convs): Sequential(
            (0): Sequential(
              (0): Conv1d(192, 64, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv1d(64, 64, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
      )
      (2): Sequential(
        (0): FeaturePropogation(
          (convs): Sequential(
            (0): Sequential(
              (0): Conv1d(384, 128, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv1d(128, 128, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
      )
      (3): Sequential(
        (0): FeaturePropogation(
          (convs): Sequential(
            (0): Sequential(
              (0): Conv1d(768, 256, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
            (1): Sequential(
              (0): Conv1d(256, 256, kernel_size=(1,), stride=(1,), bias=False)
              (1): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (2): ReLU(inplace=True)
            )
          )
        )
      )
    )
  )
  (head): SegHead(
    (head): Sequential(
      (0): Sequential(
        (0): Conv1d(32, 32, kernel_size=(1,), stride=(1,), bias=False)
        (1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Dropout(p=0.5, inplace=False)
      (2): Sequential(
        (0): Conv1d(32, 13, kernel_size=(1,), stride=(1,))
      )
    )
  )
)
[01/08 02:54:36] S3DIS INFO: Number of params: 0.7922 M
[01/08 02:54:36] S3DIS INFO: Param groups = {
  "decay": {
    "weight_decay": 0.0001,
    "params": [
      "encoder.encoder.0.0.convs.0.0.weight",
      "encoder.encoder.1.0.skipconv.0.weight",
      "encoder.encoder.1.0.convs.0.0.weight",
      "encoder.encoder.1.0.convs.1.0.weight",
      "encoder.encoder.2.0.skipconv.0.weight",
      "encoder.encoder.2.0.convs.0.0.weight",
      "encoder.encoder.2.0.convs.1.0.weight",
      "encoder.encoder.3.0.skipconv.0.weight",
      "encoder.encoder.3.0.convs.0.0.weight",
      "encoder.encoder.3.0.convs.1.0.weight",
      "encoder.encoder.4.0.skipconv.0.weight",
      "encoder.encoder.4.0.convs.0.0.weight",
      "encoder.encoder.4.0.convs.1.0.weight",
      "decoder.decoder.0.0.convs.0.0.weight",
      "decoder.decoder.0.0.convs.1.0.weight",
      "decoder.decoder.1.0.convs.0.0.weight",
      "decoder.decoder.1.0.convs.1.0.weight",
      "decoder.decoder.2.0.convs.0.0.weight",
      "decoder.decoder.2.0.convs.1.0.weight",
      "decoder.decoder.3.0.convs.0.0.weight",
      "decoder.decoder.3.0.convs.1.0.weight",
      "head.head.0.0.weight",
      "head.head.2.0.weight"
    ],
    "lr_scale": 1.0
  },
  "no_decay": {
    "weight_decay": 0.0,
    "params": [
      "encoder.encoder.0.0.convs.0.0.bias",
      "encoder.encoder.1.0.skipconv.0.bias",
      "encoder.encoder.1.0.convs.0.1.weight",
      "encoder.encoder.1.0.convs.0.1.bias",
      "encoder.encoder.1.0.convs.1.1.weight",
      "encoder.encoder.1.0.convs.1.1.bias",
      "encoder.encoder.2.0.skipconv.0.bias",
      "encoder.encoder.2.0.convs.0.1.weight",
      "encoder.encoder.2.0.convs.0.1.bias",
      "encoder.encoder.2.0.convs.1.1.weight",
      "encoder.encoder.2.0.convs.1.1.bias",
      "encoder.encoder.3.0.skipconv.0.bias",
      "encoder.encoder.3.0.convs.0.1.weight",
      "encoder.encoder.3.0.convs.0.1.bias",
      "encoder.encoder.3.0.convs.1.1.weight",
      "encoder.encoder.3.0.convs.1.1.bias",
      "encoder.encoder.4.0.skipconv.0.bias",
      "encoder.encoder.4.0.convs.0.1.weight",
      "encoder.encoder.4.0.convs.0.1.bias",
      "encoder.encoder.4.0.convs.1.1.weight",
      "encoder.encoder.4.0.convs.1.1.bias",
      "decoder.decoder.0.0.convs.0.1.weight",
      "decoder.decoder.0.0.convs.0.1.bias",
      "decoder.decoder.0.0.convs.1.1.weight",
      "decoder.decoder.0.0.convs.1.1.bias",
      "decoder.decoder.1.0.convs.0.1.weight",
      "decoder.decoder.1.0.convs.0.1.bias",
      "decoder.decoder.1.0.convs.1.1.weight",
      "decoder.decoder.1.0.convs.1.1.bias",
      "decoder.decoder.2.0.convs.0.1.weight",
      "decoder.decoder.2.0.convs.0.1.bias",
      "decoder.decoder.2.0.convs.1.1.weight",
      "decoder.decoder.2.0.convs.1.1.bias",
      "decoder.decoder.3.0.convs.0.1.weight",
      "decoder.decoder.3.0.convs.0.1.bias",
      "decoder.decoder.3.0.convs.1.1.weight",
      "decoder.decoder.3.0.convs.1.1.bias",
      "head.head.0.1.weight",
      "head.head.0.1.bias",
      "head.head.2.0.bias"
    ],
    "lr_scale": 1.0
  }
}
